*/Εργαστήριο ΛΣ 2/ Άσκηση 2 / 2020-21


Τρόπος μεταγλώττισης: gcc ex2.c -o ex2

Ερώτηση 2: Γράψτε ένα πρόγραμμα C με τις κατάλληλες εντολές fork()ώστε να δημιουργηθούν συνολικά (μαζί με το κυρίως πρόγραμμα) έξι διεργασίες, με την ακόλουθη δομή (δέντρο) συγγένειας:

	    P0
	  /   \
	P1    P2
	     / | \
	    P3 P4 P5
		
Ως κύριο μέρος της εργασίας της κάθε διεργασία Pi θα πρέπει να τυπώνει απλά ένα μήνυμα στην οθόνη που να δηλώνει το όνομά της (Pi), το PIDτης και το PPIDτης.
Το πρόγραμμά σας θα πρέπει να συμπεριλαμβάνει επιπλέον τις κατάλληλες εντολές αναμονής-επικοινωνίαςώστε να ικανοποιούνται οι ακόλουθοι περιορισμοί-απαιτήσεις: 
(α) η διεργασία P0 πριν εκτελέσει το κύριο μέρος της εργασίας της να περιμένει την ολοκλήρωση της διεργασίας P2
(β) η διεργασία P2 πριν εκτελέσει την κύρια εργασία της να περιμένει την ολοκλήρωση όλων τωνπαιδιών της. 
Επίσης η διεργασία P0 πριν δημιουργήσει την P2 να περιμένει να λάβει ένα μήνυμα 'hellofromyourfirstchild' από τη διεργασία P1(και να το τυπώνει στην οθόνη). 
Τέλος, η διεργασία P0 με το πέρας της εκτέλεσής της θα πρέπει να αντικαθίσταται από την εντολή ps. */

#include <stdio.h> //Βιβλιοθήκες
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main(void){


int P1, P2, P3, P4, P5, status; //Μεταβλητές 
P1 = fork(); //1η fork, δημιουργια της P1 που εχει parent την P0

if (P1 < 0){ //Περιπτωση λαθους
	printf("Error while creating new proccess. Exiting...");
	exit(1);}	
else if (P1 != 0){ //Θελουμε να δημιουργησουμε την P2 αρα πρεπει fork>0 
	printf("I'm P0. My id is %d and my paren'ts id is %d\n", getpid(), getppid());
	P2 = fork(); //Δημιουργια P2
	waitpid(P2, &status, 0); //Η p0 περιμενει να εκτελεστει η P2 
	
	if (P2 == 0){ //Θελουμε να δημιουργησουμε τα παιδια της P2 δηλαδη P3, P4 και P5
        P3 = fork(); //Δημιουργια P3
            if (P3 == 0){ 
                printf("I'm the child P3. My id is %d and my parent's id is %d\n",getpid(),getppid());
                P4 = fork();
		if (P4 != 0)
			printf("I'm the child P4. My id is %d and my parent's id is %d\n",getpid(),getppid()); 
		else 
			wait(&status);       
		P5 = fork();
			if (P5 !=0 && P4 != 0) //Αν και τα 2 ειναι διαφορο του 0 τοτε αυτο που θελουμε να εκτελεστει προοριζεται για την P5 
				printf("I'm the child P5. My id is %d and my parent's id is %d\n",getpid(),getppid()); 
			else 
				wait(&status);}
	else{
		wait(&status); //Η διεργασια P2 περιμενει μεχρι να εκτελεστουν τα παιδια της 
    	printf("I'm the child P2. My id is %d and my parent's id is %d\n",  getpid(), getppid());
		}
                
    }
}
else  //Η fork επιστρεφει 0 στην διεργασια παιδι επομενως οτιδηποτε μετα την else προοριζεται για την P1 
	printf("Hello from your first child P1. My id is %d and my parent's id is %d\n", getpid(), getppid());
	 	

 
	return 0;
}
